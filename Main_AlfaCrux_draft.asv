% Data proceccing of AlfaCrux satellite

clc
clear all
close all

global t J worb Omega_meas

%-----------------------------------------------------------------------------
%% Extract data from the .mat workspace
%-----------------------------------------------------------------------------

% Load the MATLAB workspace with the measurements
% Make
load('/home/brenag/Desktop/AlfaCrux-Attitude-Motion-Reconstruction/test/data/August_7/Data_08_07_2022.mat')
 
% Epoch - Time of the first data sample
year_meas = Meas(1,1);                    
month_meas = Meas(1,2);
day_meas = Meas(1,3);
Chass = Meas(1,4);
Mins = Meas(1,5);
Secs = Meas(1,6);

t_begin = [year_meas month_meas day_meas Chass Mins Secs];

% Convert the time of each sample to Julian date 
Time = jday(Meas(:,1), Meas(:,2), Meas(:,3), Meas(:,4), Meas(:,5), Meas(:,6)); 

% Calculate the time spent since epoch (first sample) from each sample (in seconds)
Time = (Time - Time(1)) * 24 * 60 * 60; 
t=Time;

% Get the magnetometer measurements (in mG) and convert to nT
B_sat = Meas(:,10:12) * 100; 

Omega_meas = [Meas(:,7) Meas(:,8) Meas(:,9)] * pi/180;
Omega_meas = Omega_meas';



%-----------------------------------------------------------------------------
%% Extract TLE from the .txt file
%-----------------------------------------------------------------------------

% Read the lines of the TLE file
lines = readlines("/home/brenag/Desktop/AlfaCrux-Attitude-Motion-Reconstruction/test/data/August_7/TLE_08_07_2022.txt");
longstr1 = char(lines(1,1));
longstr2 = char(lines(2,1));

%-----------------------------------------------------------------------------
%% Initiate some variables
%-----------------------------------------------------------------------------

% Some flags for the SGP4, IGRF, and Sun direction models (embed_func)
flag1 = 1;                            
flag2 = 1;
flag3 = 1;  

% Set the length of the telemetry data array
N=length(t); 

S_orbital = zeros(3,N); % Sun direction in the orbital reference frame
B_orbital = zeros(3,N); % Earth magnetic field induction in the orbital reference frame
S_eci = zeros(3,N);     % Sun direction in the inertial reference frame
B_eci = zeros(3,N);     % Earth magnetic field induction in the inertial reference frame
xsat_eci = zeros(3,N);  % Radius-vector in ECI
vsat_eci = zeros(3,N);  % Velocity-vector in ECI
xsat_ecf = zeros(3,N);  % Radius-vector in ECF
vsat_ecf = zeros(3,N);  % Velocity-vector in ECF
Time=t;

% AlfaCrux Tensor of Inertia
J = [0.00183508557, -0.00000456992, 0.00000877987;
    -0.00000456992, 0.00185284505, 0.00000153435;
    0.00000877987, 0.00000153435, 0.00184586679];



% cycle for obtaining the magnetic field induction vector and Sun direction
% in ECI
for nom=1:1:length(t) 
    [omega_orbital, S_orbital(:,nom), B_orbital(:,nom), S_eci(:,nom), B_eci(:,nom), xsat_eci(:,nom), vsat_eci(:,nom), gst, SHADOW(:,nom), ~, ~, ~, xsat_ecf(:,nom), vsat_ecf(:,nom)] = embed_func(t(nom), t_begin, flag1, flag2, flag3, longstr1, longstr2);
end


%% Mean magnetic field (for constant bias estimation)
for count=1:1:length(t)
B_ref(count) = (B_eci(1,count).^2+B_eci(2,count).^2+B_eci(3,count).^2).^(0.5);
end
B_ref_mean = mean(B_ref);
disp(B_ref_mean);

% Orbital Velocity modulus 

worb = norm(omega_orbital);

%-----------------------------------------------------------------------------
%% Telemetry and Orbit Plots
%-----------------------------------------------------------------------------


% Earth orbit plot 

figure('Color',[1 1 1])
plot3(xsat_eci(1,:),xsat_eci(2,:),xsat_eci(3,:))
axis equal
hold on
plot3(xsat_eci(1,1),xsat_eci(2,1),xsat_eci(3,1),'or')
grid on

load('topo.mat','topo','topomap1'); % For Earth plotting
whos topo topomap1;
[x,y,z] = sphere(50);
R_earth = 6.371e6; %
% [x, y, z] = EarthRotation(x, y, z, i*dt);
props.AmbientStrength = 0.1;
props.DiffuseStrength = 1;
props.SpecularColorReflectance = .5;
props.SpecularExponent = 20;
props.SpecularStrength = 1;
props.FaceColor= 'texture';
props.EdgeColor = 'none';
props.FaceLighting = 'phong';
props.Cdata = topo;
surface(x*R_earth,y*R_earth,z*R_earth,props);
light('position',[-1 0 1]);
light('position',[-1.5 0.5 -0.5], 'color', [.6 .2 .2]);
axis equal
view(45,45)
xlabel('X, m')
ylabel('Y, m')
zlabel('Z, m')


% Altitude

figure('Color',[1 1 1])
plot((xsat_eci(1,:).^2+xsat_eci(2,:).^2+xsat_eci(3,:).^2).^(1/2)-6.4e6,'LineWidth',2)
xlabel('Time, s')
ylabel('Altitude, m')
grid on


% Magnetic Field in ECI frame

figure('Color',[1 1 1])
plot(Time,B_eci(1,:),'b','LineWidth',2);
hold on
plot(Time,B_eci(2,:),'g','LineWidth',2);
plot(Time,B_eci(3,:),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Magnetic field in ECI, nT')
grid on


% Magnetometer measurements with bias correction

% Remember to change the name of the file with the corrected measurements
load('/home/brenag/Desktop/AlfaCrux-Attitude-Motion-Reconstruction/test/data/August_7/Mag_measurements_without_bias_08_07_2022.mat')

figure('Color',[1 1 1])
plot(Time,B(:,1),'b','LineWidth',2);
hold on
plot(Time,B(:,2),'g','LineWidth',2);
plot(Time,B(:,3),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Magnetometer measurements without bias, nT')
grid on
legend('B_x','B_y','B_z')


% Magnetometer measurements

figure('Color',[1 1 1])
plot(Time,B_sat(:,1),'b','LineWidth',2);
hold on
plot(Time,B_sat(:,2),'g','LineWidth',2);
plot(Time,B_sat(:,3),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Magnetometer measurements, nT')
grid on
legend('B_x','B_y','B_z')


% Comparison between the modulus of the magnetic field in ECI and the
% measurements with and without bias

figure('Color',[1 1 1])
plot(Time,(B_eci(1,:).^2+B_eci(2,:).^2+B_eci(3,:).^2).^(0.5),'b','LineWidth',2);
hold on
plot(Time,(B_sat(:,1).^2+B_sat(:,2).^2+B_sat(:,3).^2).^(0.5),'*-r','LineWidth',2);
plot(Time,(B(:,1).^2+B(:,2).^2+B(:,3).^2).^(0.5),'*-g','LineWidth',2);
xlabel('Time, s')
ylabel('Magnetic field value, nT')
legend('Model','Measurements','Measurements without bias')
grid on


% Sun direction vector

figure('Color',[1 1 1])
plot(Time,S_eci(1,:),'b','LineWidth',2);
hold on
plot(Time,S_eci(2,:),'g','LineWidth',2);
plot(Time,S_eci(3,:),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Sun direction vector')
grid on


% Gyroscope measurements (in deg/s)

figure('Color',[1 1 1])
plot(Time,Meas(:,7),'b','LineWidth',2);
hold on
plot(Time,Meas(:,8),'g','LineWidth',2);
plot(Time,Meas(:,9),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Angular velocity measurements, deg/s')
grid on


% Angular momentum (in kg*mÂ²/s)

for k = 1:1:length(Meas(:,7))
    K(:,k) = J * Meas(k,7:9)' * pi/180;
    K_norm(k) = norm(K(:,k));
end

figure('Color',[1 1 1])
plot(Time,K(1,:),'b','LineWidth',2);
hold on
plot(Time,K(2,:),'g','LineWidth',2);
plot(Time,K(3,:),'r','LineWidth',2);
plot(Time,K_norm,'k','LineWidth',2);
xlabel('Time, s')
ylabel('Angular momentum, kg*m^2/s')
grid on


% Current from each solar panel

figure('Color',[1 1 1])
plot(Time,Meas(:,13),'b','LineWidth',2);
hold on
plot(Time,Meas(:,14),'g','LineWidth',2);
plot(Time,Meas(:,15),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Solar panels curents, mA')
grid on
legend('X','Y','Z')


% Voltage from each solar panel

figure('Color',[1 1 1])
plot(Time,Meas(:,16),'b','LineWidth',2);
hold on
plot(Time,Meas(:,17),'g','LineWidth',2);
plot(Time,Meas(:,18),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Solar panels voltage, mV')
legend('X','Y','Z')
grid on


% Temperature of each solar panel

figure('Color',[1 1 1])
plot(Time,Meas(:,19),'b','LineWidth',2);
hold on
plot(Time,Meas(:,20),'--b','LineWidth',2);
plot(Time,Meas(:,21),'g','LineWidth',2);
plot(Time,Meas(:,22),'--g','LineWidth',2);
plot(Time,Meas(:,23),'r','LineWidth',2);
plot(Time,Meas(:,24),'--r','LineWidth',2);
xlabel('Time, s')
ylabel('Temperature, C')
legend('X+','X-','Y+','Y-','Z+','Z-')
grid on




%-----------------------------------------------------------------------------
%% Differential Evolution 
%-----------------------------------------------------------------------------

% The process of the differential evolution might take some time so the ';'
% is removed for the user to follow the progress of the execution in the
% command window

% The user can also use '%' to simulate with previous DE results

diffevol_batch_estimation 
x_est  

%-----------------------------------------------------------------------------
%% Kalman Filter
%-----------------------------------------------------------------------------

% Matrices inicialization for Kalman filtering
N = round(t(end)); % Number of simulated samples (1 per second) 
N = 300;

% Create a time vector for the simulated samples
t = [0:1:round(t(end))];
t = [0:1:300];

% Kalman Filter State Vector
State = zeros(10,N); 

% Create the "real" State Vector 
Real_State = zeros(10,N);

% Set the initial state with the differential evolution results
Real_State(:,1) = x_est;

% Set the initial state with the previous differential evolution results
%Real_State(:,1) = [0.0367 %cost = 0.010
%   -0.7269
 %  -0.6826
 %  -0.0660
 %  -0.0010
 %  -0.0026
 %  -0.0019
 %   0.0174
 %   0.0022
 %  -0.0189];

%Real_State(:,1) = [0.4246
%    0.7331
%   -0.4490
%    0.2841
%   -0.0009
 %   0.0025
 %   0.0004
 %   0.0168
 %   0.0026
 %  -0.0188];

% 
%Real_State(:,1) = [0.2065
 %    0.9307
 %    0.2235
 %    0.2031
 %   -0.0104
 %   -0.0008
  %   0.0086
  %   0.0206
  %   0.0029
  %  -0.0222];

%Real_State(:,1) = [0.3772
% -0.1618
% -0.8929
% 0.1850
% 0.0204
% -0.0130
% 0.0026
% -0.0009
% 0.0014
% -0.0088];

%Determine the IGRF model for the sattelite initial quaternion guess
B_model(:,1) = quatrotate(Real_State(1:4, 1)', B_eci(:,1)');
B_model_norm(:, 1) = B_model(:, 1)/ norm(B_model(:, 1));

% Initialization of the EKF covariance matrices
EKF_initialization;

% Set the initial state with the Differential Evolution Results
State(:, 1) = Real_State(:,1);
State(8:10, 1) = State(8:10, 1);
State(5:7, 1) = State(5:7, 1);


% Extended Kalman filter iterative cycle 
for sample = 1:N
    
    % Propagate the IGRF ECI Geomagnetic Field Vector for each timestamp 
    [~, ~, ~, ~, B_eci(:,sample), ~, ~, ~, ~, ~, ~, ~, ~, ~] = embed_func(sample, t_begin, flag1, flag2, flag3, longstr1, longstr2);
    
    % Rotate the Magnetic Field vector by the current quaternion 
    B_model(:,sample) = quatrotate(Real_State(1:4, sample)', B_eci(:,sample)');

    % Create the "real" State Vector by motion integration
    [~, Real_State(:, sample+1)] = motion_integration(Real_State(:, sample), B_model(:,sample), sample);

    % Simulate the magnetic field measurements using the "real" state
    % vector 
    B_sat = quatrotate(Real_State(1:4, sample)', B_eci(:,sample)')'+normrnd(0,200,3,1);
    
    % Estimate the current state using the EKF
    [State(:, sample + 1), P] = EKF(State(:, sample), P, B_sat, B_eci(:,sample), EKF_parameters, 1, sample);

end 


%-----------------------------------------------------------------------------
%% Reconstructed Attitude Motion Plots
%-----------------------------------------------------------------------------


% Real Magnetic Dipole moment

figure('Color',[1 1 1])
plot(t,Real_State(8,:),'b','LineWidth',2);
hold on
plot(t,Real_State(9,:),'g','LineWidth',2);
plot(t,Real_State(10,:),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Real residual magnetic dipole, Am^2')
grid on


% EKF Dipole Moment

figure('Color',[1 1 1])
plot(t,State(8,:),'b','LineWidth',2);
hold on
plot(t,State(9,:),'g','LineWidth',2);
plot(t,State(10,:),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Estimated residual magnetic dipole, Am^2')
grid on


% Real Angular velocity

figure('Color',[1 1 1])
plot(t,Real_State(5,:)*180/pi,'b','LineWidth',2);
hold on
plot(t,Real_State(6,:)*180/pi,'g','LineWidth',2);
plot(t,Real_State(7,:)*180/pi,'r','LineWidth',2);
xlabel('Time, s')
ylabel('Angular velocity, deg/s')
grid on
legend('\omega_x','\omega_y','\omega_z')


% EKF Angular Velocity

figure('Color',[1 1 1])
plot(t,State(5,:)*180/pi,'b','LineWidth',2);
hold on
plot(t,State(6,:)*180/pi,'g','LineWidth',2);
plot(t,State(7,:)*180/pi,'r','LineWidth',2);
xlabel('Time, s')
ylabel('Estimated Angular Velocity, deg/s')
grid on
legend('\omega_x','\omega_y','\omega_z')


% Real Quaternion

figure('Color',[1 1 1])
plot(t,Real_State(1,:),'b','LineWidth',2);
hold on
plot(t,Real_State(2,:),'g','LineWidth',2);
plot(t,Real_State(3,:),'r','LineWidth',2);
plot(t,Real_State(4,:),'y','LineWidth',2);
xlabel('Time, s')
ylabel('Quaternion')
grid on
legend('q_0','q_1','q_2','q_3')


% EKF Quaternion

figure('Color',[1 1 1])
plot(t,State(1,:),'b','LineWidth',2);
hold on
plot(t,State(2,:),'g','LineWidth',2);
plot(t,State(3,:),'r','LineWidth',2);
plot(t,State(4,:),'y','LineWidth',2);
xlabel('Time, s')
ylabel('Estimated Quaternion')
grid on
legend('q_0','q_1','q_2','q_3')


%-----------------------------------------------------------------------------
%% Estimation Accuracy Plots
%-----------------------------------------------------------------------------

 
% Magnetic dipole moment error/Accuracy

figure('Color',[1 1 1])
plot(t,Real_State(8,:)-State(8,:),'b','LineWidth',2);
hold on
plot(t,Real_State(9,:)-State(9,:),'g','LineWidth',2);
plot(t,Real_State(10,:)-State(10,:),'r','LineWidth',2);
xlabel('Time, s')
ylabel('Magnetic dipole estimation accuracy, Am^2')
grid on


% Angular velocity error/Accuracy

figure('Color',[1 1 1])
plot(t,(Real_State(5,:)-State(5,:))*180/pi,'b','LineWidth',2);
hold on
plot(t,(Real_State(6,:)-State(6,:))*180/pi,'g','LineWidth',2);
plot(t,(Real_State(7,:)-State(7,:))*180/pi,'r','LineWidth',2);
xlabel('Time, s')
ylabel('Angular velocity estimation accuracy, deg/s')
grid on
legend('\Delta\omega_x','\Delta\omega_y','\Delta\omega_z')


% Quaternion error/Accuracy

% Quaternion error calculation
quat_error = quatnormalize(quatmultiply(Real_State(1:4,:)',quatconj(State(1:4,:)')))';

figure('Color',[1 1 1])
plot(t,2*acos(quat_error(1,:))*180/pi,'b','LineWidth',2);
xlabel('Time, s')
ylabel('Attitude estimation accuracy, deg')
grid on


% Using asin and the vectorial part instead of acos and the scalar part
% produces minor numerical error for smaller error values due to the
% linearity of asin function 

quat_error_asin = zeros(length(t),1);
for K=1:1:length(t)
    quat_error_asin(K) = norm(quat_error(2:4,K));
end

figure('Color',[1 1 1])
plot(t,2*asin(quat_error_asin)*180/pi,'b','LineWidth',2);
xlabel('Time, s')
ylabel('Attitude estimation accuracy, deg')
grid on

%% Attitude estimation accuracy using axis-angle

real_axang = quat2axang(Real_State(1:4,:)');
est_axang = quat2axang(State(1:4,:)');

att_error_axang = real_axang - est_axang;

figure('Color',[1 1 1])
plot(t,att_error_axang(:,4)*180/pi,'b','LineWidth',2);
xlabel('Time, s')
ylabel('Attitude estimation accuracy, deg')
grid on


%% Mean and RMSE

RMSE_axang =  (sqrt(mean((real_axang(:,4) - est_axang(:,4)).^2)))*180/pi;
MEAN_axang = mean(real_axang(:,4) - est_axang(:,4))*180/pi;
MEAN_rot = mean(2*acos(quat_error(1,:)))*180/pi;
MEAN_rot_asin = mean(2*asin(quat_error_asin))*180/pi;
disp(RMSE_axang);
disp(MEAN_axang);
disp(MEAN_rot);
disp(MEAN_rot_asin);

